services:
  nginx:
    # Nginx here acts mostly as a reverse proxy for routing, in prod you'd build the app then serve it via a container
    # like this in a 2 step build
    restart: always
    build:
      context: ./
      dockerfile: dev/nginx/Dockerfile.local
    links:
      - site
      - service
      - mysql
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  site:
    # 'Site' is the ImPower React UI
    restart: always
    build:
      context: ./site
      dockerfile: Dockerfile.local
    volumes:
      - ./site:/app
    links:
      - service
      - mysql
    ports:
      - "8081:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  service:
    # Node + TS backend
    build:
      context: ./service
      dockerfile: Dockerfile.local
    volumes:
      - ./service:/app
    links:
      - mysql
    ports:
      - "8082:8080"
    env_file:
      - ./service/config/.env.local
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
  mysql:
    # MySQL Database, set up in an ephemeral way
    # Volumes can be set up to carry on if desired.
    # Mysql specifics for this cribbed from https://tecadmin.net/using-mysql-with-docker-compose/
    # Migration script could be used to populate, but opting for ORM for simplicity
    restart: always
    image: mysql:8
#    command: mysqld --default-authentication-plugin=mysql_native_password
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
    # Not production appropriate, but fine for a local env
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_HOST: db
      MYSQL_PORT: 3306
      MYSQL_DATABASE: impower
      MYSQL_USER: mysql_user
      MYSQL_PASSWORD: mysql_password
    ports:
      - "13306:3306"
  redis:
    # Why redis?  Because it's easy, fast, reliable.  Great for session storage and caching
    restart: always
    image: redis:latest
    ports:
      - "6379"
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
